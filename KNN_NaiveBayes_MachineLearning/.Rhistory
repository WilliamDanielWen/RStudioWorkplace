test_set_label<- as.factor(test_set_label)
setwd("..")
clean_column <- function (column,substitution){
row_num <- NROW(predicted_labels)
for(i in 1:row_num)
if(as.character(column[i])=" ?")
column[i]<-as.factor(substitution)
column
}
#disselect the missing value and then find the most frequent value
names(which.max(table(test_set_x$workclass)))
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
train_set_x<-train_set[,1:14]
train_set_label<-train_set[,15]
test_set_x<-test_set[,1:14]
test_set_label<-test_set[,15]
#transfer the objects into character and remove the extra "dot" in the test set
test_set_label<-gsub(".", "", as.character(test_set_label), fixed = TRUE)
test_set_label<- as.factor(test_set_label)
setwd("..")
clean_column <- function (column,substitution){
row_num <- NROW(predicted_labels)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(substitution)
column
}
#disselect the missing value and then find the most frequent value
names(which.max(table(test_set_x$workclass)))
subti_workclass<-names(which.max(table(test_set_x$workclass)))
summary(test_set_x$workclass)
clean_column(test_set_x$workclass,subti_workclass)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
train_set_x<-train_set[,1:14]
train_set_label<-train_set[,15]
test_set_x<-test_set[,1:14]
test_set_label<-test_set[,15]
#transfer the objects into character and remove the extra "dot" in the test set
test_set_label<-gsub(".", "", as.character(test_set_label), fixed = TRUE)
test_set_label<- as.factor(test_set_label)
setwd("..")
clean_column <- function (column,substitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(substitution)
column
}
#disselect the missing value and then find the most frequent value
subti_workclass<-names(which.max(table(test_set_x$workclass)))
summary(test_set_x$workclass)
clean_column(test_set_x$workclass,subti_workclass)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
train_set_x<-train_set[,1:14]
train_set_label<-train_set[,15]
test_set_x<-test_set[,1:14]
test_set_label<-test_set[,15]
#transfer the objects into character and remove the extra "dot" in the test set
test_set_label<-gsub(".", "", as.character(test_set_label), fixed = TRUE)
test_set_label<- as.factor(test_set_label)
setwd("..")
clean_column <- function (column,substitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(substitution)
}
#disselect the missing value and then find the most frequent value
subti_workclass<-names(which.max(table(test_set_x$workclass)))
summary(test_set_x$workclass)
clean_column(test_set_x$workclass,subti_workclass)
summary(test_set_x$workclass)
test_set_x$workclass<-clean_column(test_set_x$workclass,subti_workclass)
summary(test_set_x$workclass)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
train_set_x<-train_set[,1:14]
train_set_label<-train_set[,15]
test_set_x<-test_set[,1:14]
test_set_label<-test_set[,15]
#transfer the objects into character and remove the extra "dot" in the test set
test_set_label<-gsub(".", "", as.character(test_set_label), fixed = TRUE)
test_set_label<- as.factor(test_set_label)
setwd("..")
clean_column <- function (column,substitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(substitution)
column
}
#disselect the missing value and then find the most frequent value
subti_workclass<-names(which.max(table(test_set_x$workclass)))
summary(test_set_x$workclass)
test_set_x$workclass<-clean_column(test_set_x$workclass,subti_workclass)
summary(test_set_x$workclass)
summary(train_set_x)
View(train_set_x)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
train_set_x<-train_set[,1:14]
train_set_label<-train_set[,15]
test_set_x<-test_set[,1:14]
test_set_label<-test_set[,15]
#transfer the objects into character and remove the extra "dot" in the test set
test_set_label<-gsub(".", "", as.character(test_set_label), fixed = TRUE)
test_set_label<- as.factor(test_set_label)
setwd("..")
#clean the data
clean_column <- function (column,substitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(substitution)
column
}
clean_dataset <- function(dataset){
for (i in 1:14)
#select the most frequent item to substitute the missing value
subti_value<-names(which.max(table(dataset[,i])))
dataset[,i]<-clean_column(dataset[,i],subti_value)
}
library(e1071) #import to use the naive bayes class
#define functions to clean the data
clean_column <- function (column,substitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(substitution)
column
}
clean_dataset <- function(dataset){
for (i in 1:15)
#select the most frequent item to substitute the missing value
subti_value<-names(which.max(table(dataset[,i])))
dataset[,i]<-clean_column(dataset[,i],subti_value)
}
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
clean_dataset(train_set)
clean_dataset(test_set)
train_set_x<-train_set[,1:14]
train_set_label<-train_set[,15]
test_set_x<-test_set[,1:14]
test_set_label<-test_set[,15]
setwd("..")
summary(test_set)
library(e1071) #import to use the naive bayes class
#define functions to clean the data
clean_column <- function (column,substitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(substitution)
column
}
clean_dataset <- function(dataset){
for (i in 1:15)
#select the most frequent item to substitute the missing value
subti_value<-names(which.max(table(dataset[,i])))
dataset[,i]<-clean_column(dataset[,i],subti_value)
dataset
}
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
train_set<-clean_dataset(train_set)
test_set<-clean_dataset(test_set)
summary(train_set)
summary(test_set)
View(test_set)
train_set
library(e1071) #import to use the naive bayes class
#define functions to clean the data
clean_column <- function (column,substitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(substitution)
column
}
clean_dataset <- function(dataset){
for (i in 1:15)
#select the most frequent item to substitute the missing value
subti_value<-names(which.max(table(dataset[,i])))
dataset[,i]<-clean_column(dataset[,i],subti_value)
dataset
}
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
train_set<-clean_dataset(train_set)
test_set<-clean_dataset(test_set)
summary(train_set)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
#define functions to clean the data
clean_column <- function (column,substitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column
column[i]<-as.factor(substitution)
}
clean_dataset <- function(dataset){
for (i in 1:15)
#select the most frequent item to substitute the missing value
dataset[,i]<-clean_column(dataset[,i],subti_value)
subti_value<-names(which.max(table(dataset[,i])))
dataset
}
train_set<-clean_dataset(train_set)
test_set<-clean_dataset(test_set)
test_set<-clean_dataset(test_set)
subti_value<-names(which.max(table(dataset[,i])))
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
#define functions to clean the data
clean_dataset <- function(dataset){
for (j in 1:15)
#select the most frequent item to substitute the missing value
subti_value<-names(which.max(table(dataset[,j])))
row_num <- NROW(dataset[,j])
for(i in 1:row_num)
if(as.character(dataset[i,j])==" ?")
dataset[i,j]<-as.factor(subti_value)
dataset
}
train_set<-clean_dataset(train_set)
test_set<-clean_dataset(test_set)
summary(train_set)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
clean_column <- function(column,sbstitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(sbstitution)
column
}
subti_workclass<-names(which.max(table(train_set$workclass)))
test_set_x$workclass<-clean_column(train_set$workclass,subti_workclass)
subti_workclass<-names(which.max(table(test_set$workclass)))
test_set_x$workclass<-clean_column(test_set$workclass,subti_workclass)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
clean_column <- function(column,sbstitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(sbstitution)
column
}
subti_workclass<-names(which.max(table(train_set$workclass)))
train_set$workclass<-clean_column(train_set$workclass,subti_workclass)
subti_workclass<-names(which.max(table(test_set$workclass)))
train_set$workclass<-clean_column(test_set$workclass,subti_workclass)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
clean_column <- function(column,sbstitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(sbstitution)
column
}
subti_workclass<-names(which.max(table(train_set$workclass)))
train_set$workclass<-clean_column(train_set$workclass,subti_workclass)
subti_workclass<-names(which.max(table(test_set$workclass)))
test_set$workclass<-clean_column(test_set$workclass,subti_workclass)
summary(test_set)
summary(train_set)
View(train_set)
View(train_set)
View(test_set)
subti_workclass<-names(which.max(table(train_set$occupation)))
train_set$occupation<-clean_column(train_set$occupation,subti_workclass)
subti_workclass<-names(which.max(table(test_set$occupation)))
test_set$occupation<-clean_column(test_set$occupation,subti_workclass)
summary(train_set)
View(train_set)
View(test_set)
subti_workclass<-names(which.max(table(train_set$native.country)))
train_set$native.country<-clean_column(train_set$native.country,subti_workclass)
subti_workclass<-names(which.max(table(test_set$native.country)))
test_set$native.country<-clean_column(test_set$native.country,subti_workclass)
View(test_set)
View(train_set)
precision<-calculate_precision(predict_test_set_label,test_set_label)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
#clean the data with missing value of " ?"
clean_column <- function(column,sbstitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(sbstitution)
column
}
subti_workclass<-names(which.max(table(train_set$workclass)))
train_set$workclass<-clean_column(train_set$workclass,subti_workclass)
subti_workclass<-names(which.max(table(test_set$workclass)))
test_set$workclass<-clean_column(test_set$workclass,subti_workclass)
subti_workclass<-names(which.max(table(train_set$occupation)))
train_set$occupation<-clean_column(train_set$occupation,subti_workclass)
subti_workclass<-names(which.max(table(test_set$occupation)))
test_set$occupation<-clean_column(test_set$occupation,subti_workclass)
subti_workclass<-names(which.max(table(train_set$native.country)))
train_set$native.country<-clean_column(train_set$native.country,subti_workclass)
subti_workclass<-names(which.max(table(test_set$native.country)))
test_set$native.country<-clean_column(test_set$native.country,subti_workclass)
#prepare input variables and labels
train_set_x<-train_set[,1:14]
train_set_label<-train_set[,15]
test_set_x<-test_set[,1:14]
test_set_label<-test_set[,15]
setwd("..")
#define a function to calculate the prediction precision
calculate_precision <- function (predicted_labels,true_labels){
error_count<- 0
total_number <- NROW(predicted_labels)
for(i in 1:total_number)
if(predicted_labels[i]!=true_labels[i])
error_count <- error_count+1
error_count
precision <- (1-error_count/total_number)*100
}
#train the naiveBayes model and do the prediction
model <- naiveBayes(label ~ ., data = train_set)
predict_test_set_label<-predict(model, test_set_x)
#transform the predict_test_set_label and test_set_label from factor into character to calculate
#precision
predict_test_set_label <- as.character(predict_test_set_label)
test_set_label <- as.character(test_set_label)
precision<-calculate_precision(predict_test_set_label,test_set_label)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
#step1 clean the data
#clean the data with missing value of " ?"
clean_column <- function(column,sbstitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(sbstitution)
column
}
subti_value<-names(which.max(table(train_set$workclass)))
train_set$workclass<-clean_column(train_set$workclass,subti_value)
subti_value<-names(which.max(table(test_set$workclass)))
test_set$workclass<-clean_column(test_set$workclass,subti_value)
subti_value<-names(which.max(table(train_set$occupation)))
train_set$occupation<-clean_column(train_set$occupation,subti_value)
subti_value<-names(which.max(table(test_set$occupation)))
test_set$occupation<-clean_column(test_set$occupation,subti_value)
subti_value<-names(which.max(table(train_set$native.country)))
train_set$native.country<-clean_column(train_set$native.country,subti_value)
subti_value<-names(which.max(table(test_set$native.country)))
test_set$native.country<-clean_column(test_set$native.country,subti_value)
#prepare input variables and labels
train_set_x<-train_set[,1:14]
train_set_label<-train_set[,15]
test_set_x<-test_set[,1:14]
test_set_label<-test_set[,15]
setwd("..")
#step2 build the naive bayes model and make prediction
#define a function to calculate the prediction precision
calculate_precision <- function (predicted_labels,true_labels){
error_count<- 0
total_number <- NROW(predicted_labels)
for(i in 1:total_number)
if(predicted_labels[i]!=true_labels[i])
error_count <- error_count+1
error_count
precision <- (1-error_count/total_number)*100
}
#train the naiveBayes model and make the prediction
model <- naiveBayes(label ~ ., data = train_set)
predict_test_set_label<-predict(model, test_set_x)
#transform the predict_test_set_label and test_set_label from factor into character to calculate
#precision
predict_test_set_label <- as.character(predict_test_set_label)
test_set_label <- as.character(test_set_label)
#store the precision
precision<-calculate_precision(predict_test_set_label,test_set_label)
library(e1071) #import to use the naive bayes class
#read file from the training data set and the test data set
setwd("census")
train_set <- read.csv("adult.train.csv")
test_set <- read.csv("adult.test.csv")
#transfer the objects into character and remove the extra "dot" in the test set
test_set[,15]<-gsub(".", "", as.character(test_set[,15]), fixed = TRUE)
test_set[,15]<- as.factor(test_set[,15])
#step1 clean the data
#clean the data with missing value of " ?"
clean_column <- function(column,sbstitution){
row_num <- NROW(column)
for(i in 1:row_num)
if(as.character(column[i])==" ?")
column[i]<-as.factor(sbstitution)
column
}
subti_value<-names(which.max(table(train_set$workclass)))
train_set$workclass<-clean_column(train_set$workclass,subti_value)
subti_value<-names(which.max(table(test_set$workclass)))
test_set$workclass<-clean_column(test_set$workclass,subti_value)
subti_value<-names(which.max(table(train_set$occupation)))
train_set$occupation<-clean_column(train_set$occupation,subti_value)
subti_value<-names(which.max(table(test_set$occupation)))
test_set$occupation<-clean_column(test_set$occupation,subti_value)
subti_value<-names(which.max(table(train_set$native.country)))
train_set$native.country<-clean_column(train_set$native.country,subti_value)
subti_value<-names(which.max(table(test_set$native.country)))
test_set$native.country<-clean_column(test_set$native.country,subti_value)
#prepare input variables and labels
train_set_x<-train_set[,1:14]
train_set_label<-train_set[,15]
test_set_x<-test_set[,1:14]
test_set_label<-test_set[,15]
setwd("..")
#step2 build the naive bayes model and make prediction
#define a function to calculate the prediction precision
calculate_precision <- function (predicted_labels,true_labels){
error_count<- 0
total_number <- NROW(predicted_labels)
for(i in 1:total_number)
if(predicted_labels[i]!=true_labels[i])
error_count <- error_count+1
error_count
precision <- (1-error_count/total_number)*100
}
#train the naiveBayes model and make the prediction
model <- naiveBayes(label ~ ., data = train_set)
predict_test_set_label<-predict(model, test_set_x)
#transform the predict_test_set_label and test_set_label from factor into character to calculate
#precision
predict_test_set_label <- as.character(predict_test_set_label)
test_set_label <- as.character(test_set_label)
#store the precision
precision<-calculate_precision(predict_test_set_label,test_set_label)
